// Code generated by MockGen. DO NOT EDIT.
// Source: result.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	app "github.com/nncdevel-io/wait-dockerd-startup/app"
)

// MockResult is a mock of Result interface.
type MockResult struct {
	ctrl     *gomock.Controller
	recorder *MockResultMockRecorder
}

// MockResultMockRecorder is the mock recorder for MockResult.
type MockResultMockRecorder struct {
	mock *MockResult
}

// NewMockResult creates a new mock instance.
func NewMockResult(ctrl *gomock.Controller) *MockResult {
	mock := &MockResult{ctrl: ctrl}
	mock.recorder = &MockResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResult) EXPECT() *MockResultMockRecorder {
	return m.recorder
}

// IncrementFailure mocks base method.
func (m *MockResult) IncrementFailure() *app.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementFailure")
	ret0, _ := ret[0].(*app.Result)
	return ret0
}

// IncrementFailure indicates an expected call of IncrementFailure.
func (mr *MockResultMockRecorder) IncrementFailure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFailure", reflect.TypeOf((*MockResult)(nil).IncrementFailure))
}

// IncrementSuccess mocks base method.
func (m *MockResult) IncrementSuccess() *app.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementSuccess")
	ret0, _ := ret[0].(*app.Result)
	return ret0
}

// IncrementSuccess indicates an expected call of IncrementSuccess.
func (mr *MockResultMockRecorder) IncrementSuccess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementSuccess", reflect.TypeOf((*MockResult)(nil).IncrementSuccess))
}
